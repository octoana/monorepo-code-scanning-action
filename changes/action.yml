name: 'Changes'
description: 'Find changes in the PR that affect the defined projects and prepare the scan matrix'
inputs:
  variables:
    description: 'YAML string of variables to replace in an XML build file (optional)'
    required: false
  build-xml:
    description: 'Path to the XML file that defines the projects to build (optional)'
    required: false
  projects-json:
    description: 'Path to the JSON file that defines the projects to build (optional)'
    required: false
  extra-globs:
    description: 'Extra globs to include in the scan in JSON format, by language (optional)'
    required: false
  queries:
    description: 'List of queries to run, comma separated (optional). Defaults to "code-scanning", or overriden by the "queries" input in the project definition'
    required: false
  config-file:
    description: 'Path to CodeQL config to use (optional)'
    required: false
  config:
    description: 'Inline CodeQL config YAML (optional)'
    required: false
outputs:
  projects:
    description: Matrix of the projects to analyze
    value: ${{ steps.build-matrix.outputs.result }}
  scan-required:
    description: 'Whether a scan is required'
    value: ${{ steps.build-matrix.outputs.scan-required }}
runs:
  using: 'composite'
  steps:
    - if: ${{ inputs.build-xml != '' || inputs.projects-json != '' || inputs.config-file != '' }}
      name: Checkout required files
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          ${{ inputs.build-xml }}
          ${{ inputs.projects-json }}
          ${{ inputs.config-file }}
        sparse-checkout-cone-mode: false

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install npm dependencies
      run: |
        cd $GITHUB_ACTION_PATH
        npm install xml2js@0.6.2 yaml@2.5.1
      shell: bash

    - name: Read projects JSON
      id: read-projects
      if: ${{ inputs.projects-json != '' }}
      uses: actions/github-script@v7
      env:
        filename: ${{ inputs.projects-json }}
      with:
        result-encoding: string
        script: |
          const fs = require('fs')
          try {
            const projects = fs.readFileSync(process.env.filename, 'utf8')
            return projects
          } catch (error) {
            core.setFailed(`Failed to read projects JSON: ${error}`)
          }

    - name: Process MSBuild XML into JSON
      id: build-projects
      if: ${{ inputs.projects-json == '' && inputs.build-xml != '' }}
      uses: actions/github-script@v7
      env:
        filename: ${{ inputs.build-xml }}
        variables: ${{ inputs.variables }}
      with:
        result-encoding: string
        script: |
          const path = require('node:path')
          const action_path = process.env.GITHUB_ACTION_PATH
          const script = require(path.join(action_path, 'build-projects-from-xml.js'))
          return script(github, context, core)

    - name: Check we have projects
      id: check-projects
      if: ${{ ! steps.read-projects.outputs.result && ! steps.build-projects.outputs.projects }}
      run: |
        echo "::error::No projects found"
        exit 1
      shell: bash

    - name: Debug build projects
      if: ${{ runner.debug == '1' }}
      run: echo "${result}"
      shell: bash
      env:
        result: ${{ toJson(steps.build-projects.outputs) }}

    - name: Build filters
      run: echo "Building filters debugging msg." 
      id: build-filters
      uses: actions/github-script@v7
      env: 
        projects: ${{ steps.read-projects.outputs.result || steps.build-projects.outputs.projects }}
        extra_globs: ${{ inputs.extra-globs }}
      with:
        result-encoding: string
        script: |
          const path = require('node:path')
          const action_path = process.env.GITHUB_ACTION_PATH
          const script = require(path.join(action_path, 'build-filters.js'))
          return script(github, context, core)

    - name: Debug build filters
      if: ${{ runner.debug == '1' }}
      run: echo "${result}"
      shell: bash
      env:
        result: ${{ toJson(steps.build-filters.outputs) }}

    - name: Filter projects by changes in the PR
      id: filter
      uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 #v3.0.2
      with:
        filters: ${{ steps.build-filters.outputs.result }}

    - name: Debug filter result
      if: ${{ runner.debug == '1' }}
      run: echo "${result}"
      shell: bash
      env:
        result: ${{ toJson(steps.filter.outputs) }}

    - name: Build matrix
      id: build-matrix
      uses: actions/github-script@v7
      env:
        filters: ${{ toJson(steps.filter.outputs) }}
        projects: ${{ steps.read-projects.outputs.result || steps.build-projects.outputs.projects }}
        queries: ${{ inputs.queries }}
        config_file: ${{ inputs.config-file }}
        config: ${{ inputs.config }}
      with:
        script: |
          const path = require('node:path')
          const action_path = process.env.GITHUB_ACTION_PATH
          const script = require(path.join(action_path, 'build-matrix.js'))
          return script(github, context, core)

    - name: Debug matrix result
      if: ${{ runner.debug == '1' }}
      run: echo "${result}"
      shell: bash
      env:
        result: ${{ toJson(steps.build-matrix.outputs) }}
